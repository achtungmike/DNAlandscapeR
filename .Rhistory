c.full <- list.files("data/loops", full.names = TRUE)
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation", full.names = TRUE)
# From 1-1,000-- ChIA-PET loops objects
if(length(c.full) != 0){
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
} else { c.list <- list(); c.full <- list()}
bigwig <- c(".bw", ".bigwig")
# From 1,001-2,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[as.logical(rowSums(sapply(bigwig, grepl, t.files)))]
if(length(t.bw.full) != 0){
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
} else { t.bw.list <- list(); t.bw.full <- list()}
# From 2,001-3,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
if(length(t.bg.full) != 0){
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000)
names(t.bg.list) <- t.bg.names
} else { t.bg.list <- list(); t.bg.full <- list() }
# From 3,001-4,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[as.logical(rowSums(sapply(bigwig, grepl, m.files)))]
if(length(m.bw.full) != 0){
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000)
names(m.bw.list) <- m.bw.names
} else { m.bw.list <- list(); m.bw.full <- list()}
# From 4,001-5,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
if(length(m.bg.full) != 0){
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000)
names(m.bg.list) <- m.bg.names
} else { m.bg.list <- list(); m.bg.full <- list()}
f.list <- append(c.list, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
m.bg.full
file <- m.bg.full
chr1reg <- GRanges(seqnames=c("1"),ranges=IRanges(start=c(152583052),end=c(152614119)))
chr1reg
region <- chr1reg
region.bed <- read_delim(file, delim = " ")
bedg <- data.frame(region.bed)
region.bedgraph <- bedg[findOverlaps(GRanges(bedg), addchr(region))@from,]
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
sample <- basename(file_path_sans_ext(file))
bumpplot <- recordPlot()
pos <- region.bedgraph$start
cluster_id <- clusterMaker(chr=chrom, pos=pos, maxGap = 100)
smooth <- locfitByCluster(x=pos, y=region.bedgraph[,4], cluster=cluster_id, bpSpan=50)
plot(pos, smooth$fitted, type="l", xaxt='n', ann=FALSE)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
mtext("Methylation",side=2,line=2.5,cex=1,font=2)
points(pos, region.bedgraph[,4])
runApp()
runApp()
shiny::runApp()
?plotBed
runApp()
runApp()
chromend = end, labeltext = TRUE)
runApp()
shiny::runApp()
shiny::runApp()
library(rtracklayer)
library(GenomeInfoDb)
si <- Seqinfo(genome="hg19")
wigToBigWig("/Users/lareauc/Downloads/Naive_RNAseq.wig", seqinfo = si, dest = "data/Naive_RNAseq.bw")
?wigToBigWig
?rtracklayer::import
a<-import("/Users/lareauc/Downloads/Naive_RNAseq.wig", format = "WIG")
head(a)
?rtracklayer::export
export(a, format = "BigWig",  "data/Naive_RNAseq.bw")
a<-import("/Users/lareauc/Downloads/Naive_RNAseq.wig", format = "WIG", seqinfo = si)
export(a, format = "BigWig",  "data/Naive_RNAseq.bw")
irl <- IRangesList(lapply(coverage(a) == 1L, as, "IRanges"))
gr1b <- as(irl, "GRanges")
export(gr1b, format = "BigWig",  "data/Naive_RNAseq.bw")
head(gr1b)
gr1c <- as(slice(coverage(a), lower=1L, upper=1L), "GRanges")
head(gr1c)
export(gr1c, format = "BigWig",  "data/Naive_RNAseq.bw")
export(gr1c, format = "BigWig",  "data/Naive_RNAseq.bw", seqinfo = si)
head(a)
seq(UCSC)
seq(a)
str(a)
?`UCSCData-class`
export(as(gr1c, "UCSCData"), format = "BigWig",  "data/Naive_RNAseq.bw", seqinfo = si)
export(as(gr1c, "UCSCData"), format = "BigWig",  "data/Naive_RNAseq.bw")
export(as(gr1c, "UCSCData", seqinfo = si), format = "BigWig",  "data/Naive_RNAseq.bw")
gr1c <- as(as(slice(coverage(a), lower=1L, upper=1L), "GRanges"), "UCSCData")
head(gr1c)
gr1c@seqinfo <- si
export(gr1c, format = "BigWig",  "data/Naive_RNAseq.bw")
runApp()
runApp()
head(a)
head(gr1c)
?setdiff
grd<-disjoin(a)
grd[1==countOverlaps(grd,gr)]
grd[1==countOverlaps(grd,a)]
head(grd)
head(gr1c)
findOverlaps(a,gr1c)
length(gr1c)
length(a)
head(a)
length(gr1b)
length(a)
findOverlaps(a,gr1c)@subjectHits
findOverlaps(a,gr1c)@from
length(findOverlaps(a,gr1c)@from)
length(a)
length(findOverlaps(a,gr1c)@to)
length(unique(findOverlaps(a,gr1c)@to))
max(unique(findOverlaps(a,gr1c)@to))
max(unique(findOverlaps(a,gr1c)@from))
head(a[unique(findOverlaps(a,gr1c)@from)])
a<-import("/Users/lareauc/Downloads/Naive_RNAseq.wig", format = "WIG", seqinfo = si)
gr1c <- as(as(slice(coverage(a), lower=1L, upper=1L), "GRanges"), "UCSCData")
export(head(a[unique(findOverlaps(a,gr1c)@from)]), format = "BigWig",  "data/Naive_RNAseq.bw")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
dynamic.val$region
region <- chr1reg
runApp()
ctcf.small <- ctcf[findOverlaps(GRanges(ctcf), addchr(region))@from,]
ctcf <- data.frame(read_delim("data/CTCF-regions.bed", delim = "\t"))
ctcf.small <- ctcf[findOverlaps(GRanges(ctcf), addchr(region))@from,]
ctcf.small
width(region)
start(regiom)
start(region)
ctcf.small$Start - start(region)
(ctcf.small$Start - start(region))/width(region)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
