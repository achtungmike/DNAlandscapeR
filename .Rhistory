}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
}
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y > 30) print(y)
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:(rownum+40))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
chr1reg <- GRanges(seqnames=c("1"),ranges=IRanges(start=c(115083052),end=c(152614119)))
region <- chr1reg
hic.plot <- function(base, region, sample){
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
)
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion)) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
chr1reg <- GRanges(seqnames=c("1"),ranges=IRanges(start=c(5083052),end=c(152614119)))
region <- chr1reg
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y < 20){
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum | y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum | y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
runApp()
chr9reg <- GRanges(seqnames=c("9"),ranges=IRanges(start=c(0129720),end=c(23277926)))
base
sample
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
ch
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
if(grepl("amazonaws", base)){
file <- paste(base, sample, "-", chromchr, ".rds", sep = "")
hicdata <- readRDS(gzcon(url(file)))
} else {
hicdata <- readRDS(base)
}
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
runApp()
packrat::init9)
packrat::snapshot9)
packrat::snapshot()
