names(c.list) <- c.names
# From 1,000-2,000-- Epigenetics Tracks
e.full <- list.files("data/tracks/")
e.names <- file_path_sans_ext(e.full)
e.list <- as.list(seq(1, length(e.names), by = 1) + 1000)
names(e.list) <- e.names
# From 2,000-3,000-- DNA Methylation
m.full <- list.files("data/methylation/")
m.names <- file_path_sans_ext(m.full)
m.list <- as.list(seq(1, length(m.names), by = 1) + 2000)
names(m.list) <- m.names
f.list <- append(c.list, append(e.list, m.list))
cat(f.list)
runApp()
cat(as.data.frame(do.call(rbind, f.list)))
unlist(f.list)
colnames(unlist(f.list))
cat(unlist(f.list))
cat(names(unlist(f.list)))
runApp()
renderPrint(names(unlist(f.list)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPrint
runApp()
runApp()
?reactiveValues
runApp()
c(1,2)
a <- c(1,2)
as.matrix(a, nrow = length(a))
as.data.frame(as.matrix(a, nrow = length(a)))
catas.data.frame(as.matrix(a, nrow = length(a))))
cat(as.data.frame(as.matrix(a, nrow = length(a))))
cbind(1,2,3)
cat(cbind(1,2,3))
a <- cbind(1,2,3)
a
cat(a)
colnames(a) <- c("a", "b", "c")
cat(a)
str(a)
runApp()
rbind(a,a)
cat(rbind(a,a))
capture.output(a)
capture.output(as.data.frame(a))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c.list
max(c.list)
unlist(c.list)
max(unlist(c.list))
max(unlist(c.list))+1
c.full
c(c.full, "yolo")
runApp()
runApp()
c.full
runApp()
x <- "/Volumes/Macintosh HD/Jurkat_3_SMC1.rda"
x
x.full <- c(c.full, x)
x.full
file_path_sans_ext(x.full)
c.full
basename(c.full)
basename(x.full)
runApp()
list(1,2,3,4,1001,1002)
unlist(list(1,2,3,4,1001,1002))
unlist(list(1,2,3,4,1001,1002))[unlist(list(1,2,3,4,1001,1002)) < 1000]
max(unlist(list(1,2,3,4,1001,1002))[unlist(list(1,2,3,4,1001,1002)) < 1000])
y <- list(1,2,3,4,1001,1002)
max(unlist(y)[unlist(y) < 1000])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.list(7)
val <- as.list(7)
name <- "jurkat3"
names(val) <- name
val
basename(file_path_sans_ext(m.full))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
?rednerDataTable
?renderDataTable
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
list.files("data/loops/")
list.files("data/loops/", full.names=TRUE)
list.files("data/loops", full.names=TRUE)
runApp()
c.full <- list.files("data/loops", full.names = TRUE)
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
# From 1,000-2,000-- Epigenetics Tracks
e.full <- list.files("data/tracks", full.names = TRUE)
e.names <- basename(file_path_sans_ext(e.full))
e.list <- as.list(seq(1, length(e.names), by = 1) + 1000)
names(e.list) <- e.names
# From 2,000-3,000-- DNA Methylation
m.full <- list.files("data/methylation", full.names = TRUE)
m.names <- basename(file_path_sans_ext(m.full))
m.list <- as.list(seq(1, length(m.names), by = 1) + 2000)
names(m.list) <- m.names
f.list <- append(c.list, append(e.list, m.list))
e.full
c.full <- c(c.full, val$curfill)
c.full
runApp()
runApp()
runApp()
runApp()
m.full
runApp()
print(c.full)
runApp()
runApp()
runApp()
runApp()
runApp()
library(diffloop)
load("/Users/lareauc/Desktop/Research/AryeeResearch/sarah-qual/output/valid_full-v1.0.rda")
ctcf <- rmchr(padGRanges(bedToGRanges("/Users/lareauc/Desktop/Research/AryeeResearch/sarah-qual/input/CTCF-np_peaks.narrowPeak"), pad = 1000))
h3k27ac <- rmchr(padGRanges(bedToGRanges("/Users/lareauc/Desktop/Research/AryeeResearch/sarah-qual/input/H3K27ac-np_peaks.narrowPeak"), pad = 1000))
promoter <- padGRanges(getHumanTSS(), pad = 1000)
vf_anno <- annotateLoops(valid_full, ctcf, h3k27ac, promoter)
# Very important to match data object name with the prefix of the .rda
Naive_1_SMC1 <- vf_anno[,1]
Naive_2_SMC1 <- vf_anno[,2]
Primed_1_SMC1 <- vf_anno[,3]
Primed_2_SMC1 <- vf_anno[,4]
Jurkat_1_SMC1 <- vf_anno[,5]
Jurkat_2_SMC1 <- vf_anno[,6]
saveRDS(Naive_1_SMC1, file="../data/loops/Naive_1_SMC1.rds")
saveRDS(Naive_2_SMC1, file="../data/loops/Naive_2_SMC1.rds")
saveRDS(Primed_1_SMC1, file="../data/loops/Primed_1_SMC1.rds")
saveRDS(Primed_2_SMC1, file="../data/loops/Primed_2_SMC1.rds")
saveRDS(Jurkat_1_SMC1, file="../data/loops/Jurkat_1_SMC1.rds")
saveRDS(Jurkat_2_SMC1, file="../data/loops/Jurkat_2_SMC1.rds")
getwd()
setwd("~/Desktop/Research/DNAlandscapeR/data_generating_scripts")
saveRDS(Naive_1_SMC1, file="../data/loops/Naive_1_SMC1.rds")
saveRDS(Naive_2_SMC1, file="../data/loops/Naive_2_SMC1.rds")
saveRDS(Primed_1_SMC1, file="../data/loops/Primed_1_SMC1.rds")
saveRDS(Primed_2_SMC1, file="../data/loops/Primed_2_SMC1.rds")
saveRDS(Jurkat_1_SMC1, file="../data/loops/Jurkat_1_SMC1.rds")
saveRDS(Jurkat_2_SMC1, file="../data/loops/Jurkat_2_SMC1.rds")
setwd("~/Desktop/Research/DNAlandscapeR")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("rstudio/packrat")
rsconnect::deployApp
rsconnect::deployApp()
shiny::runGitHub('DNAlandscapeR', 'aryeelab')
packrat::init()
t.files <- list.files("data/tracks", full.names = TRUE)
# From 1,000-2,000-- ReadDepth Tracks
t.bw.full <- t.files[-grep(".bw", t.files, fixed=T)]
t.bw.names <- basename(file_path_sans_ext(t.full))
t.list <- as.list(seq(1, length(t.names), by = 1) + 1000)
names(t.list) <- t.bw.names
t.bw.full
t.files
grep(".bw", t.files, fixed=T)
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
t.bw.names <- basename(file_path_sans_ext(t.full))
t.list <- as.list(seq(1, length(t.names), by = 1) + 1000)
names(t.list) <- t.bw.names
runApp()
t.files <- list.files("data/tracks", full.names = TRUE)
# From 1,000-2,000-- ReadDepth Tracks
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
t.bw.list
# From 1-1,000-- ChIA-PET loops objects
c.full <- list.files("data/loops", full.names = TRUE)
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation/", full.names = TRUE)
# From 1,001-2,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
# From 2,001-3,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000)
names(t.bg.list) <- t.bg.names
# From 3,001-4,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[grep(".bw", m.files, fixed=T)]
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000)
names(m.bw.list) <- m.bw.names
# From 4,001-5,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000)
names(m.bg.list) <- m.bg.names
f.list <- append(c.full, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
length(t.bw.full)
length(t.bg.full)
f.list
# Global variables for both server.R and ui.R to reference
library(tools)
library(shiny)
library(shinythemes)
library(ggplot2)
library(GenomicRanges)
library(diffloop)
library(Sushi)
library(foreach)
library(rtracklayer)
library(shinyFiles)
library(DT)
# From 1-1,000-- ChIA-PET loops objects
c.full <- list.files("data/loops", full.names = TRUE)
if(length(c.full) != 0){
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
} else { c.list <- list()}
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation/", full.names = TRUE)
# From 1,001-2,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
if(length(t.bw.full) != 0){
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
} else { t.bw.list <- list()}
# From 2,001-3,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
if(length(t.bg.names) != 0){
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000)
names(t.bg.list) <- t.bg.names
} else { t.bg.list <- list() }
# From 3,001-4,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[grep(".bw", m.files, fixed=T)]
if(length(m.bw.full) != 0){
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000)
names(m.bw.list) <- m.bw.names
} else { m.bw.list <- list()}
# From 4,001-5,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
if(length(m.bg.full) != 0){
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000)
names(m.bg.list) <- m.bg.names
} else { m.bg.list <- list()}
f.list <- append(c.full, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
c.full <- list.files("data/loops", full.names = TRUE)
if(length(c.full) != 0){
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
} else { c.list <- list()}
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation/", full.names = TRUE)
# From 1,001-2,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
if(length(t.bw.full) != 0){
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
} else { t.bw.list <- list()}
# From 2,001-3,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
if(length(t.bg.names) != 0){
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000)
names(t.bg.list) <- t.bg.names
} else { t.bg.list <- list() }
# From 3,001-4,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[grep(".bw", m.files, fixed=T)]
if(length(m.bw.full) != 0){
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000)
names(m.bw.list) <- m.bw.names
} else { m.bw.list <- list()}
# From 4,001-5,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
if(length(m.bg.full) != 0){
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000)
names(m.bg.list) <- m.bg.names
} else { m.bg.list <- list()}
f.list <- append(c.full, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
f.list
m.bg.list
m.bw.list
append(c.full, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
t.bw.full
t.bg.full
# Import locally hosted data file names
c.full <- list.files("data/loops", full.names = TRUE)
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation/", full.names = TRUE)
# From 1-1,000-- ChIA-PET loops objects
if(length(c.full) != 0){
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
} else { c.list <- list()}
# From 1,001-2,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[grep(".bw", t.files, fixed=T)]
if(length(t.bw.full) != 0){
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000)
names(t.bw.list) <- t.bw.names
} else { t.bw.list <- list()}
# From 2,001-3,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
if(length(t.bg.names) != 0){
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000)
names(t.bg.list) <- t.bg.names
} else { t.bg.list <- list(); t.bg.full <- list() }
# From 3,001-4,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[grep(".bw", m.files, fixed=T)]
if(length(m.bw.full) != 0){
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000)
names(m.bw.list) <- m.bw.names
} else { m.bw.list <- list()}
# From 4,001-5,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
if(length(m.bg.full) != 0){
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000)
names(m.bg.list) <- m.bg.names
} else { m.bg.list <- list()}
f.list <- append(c.full, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
t.bg.full
y <- t.bg.full
max(unlist(y)[unlist(y) < 2000])
?max
max(max(unlist(y)[unlist(y) < 2000]), 0)
suppressWarnings(max(max(unlist(y)[unlist(y) < 2000]), 0))
runApp()
runApp()
?mtext
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.character(null)
as.character(NULL)
is.na(as.character(NULL))
runApp()
runApp()
?renderPrint
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
.rs.restartR()
lib()
install.packages("Rcpp")
install.packages("Rcpp")
search()
library(tools)
library(shiny)
library(shinythemes)
library(ggplot2)
library(GenomicRanges)
library(diffloop)
library(Sushi)
library(foreach)
library(rtracklayer)
library(shinyFiles)
library(DT)
packrat::init()
source("https://bioconductor.org/biocLite.R")
biocLite(pkgs = c("AnnotationDbi", "Biobase", "BiocGenerics", "BiocParallel", "Biostrings", "GenomeInfoDb"))
packrat::init()
t <- c("GenomicAlignments", "GenomicRanges", "IRanges", "Rcpp", "Rsamtools", "S4Vectors", "SummarizedExperiment", "Sushi", "XVector", "annotate", "bumphunter", "edgeR", "genefilter", "illuminaio", "limma", "minfi", "multtest", "packrat", "preprocessCore", "rtracklayer", "siggenes", "zlibbioc")
biocLite(pkgs = t)
packrat::init()
warnings()
install.packages("Rcpp")
install.packages("Rcpp")
.rs.restartR()
packrat::init()
install.packages("Rcpp")
install.packages("Rcpp")
search()
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
search()
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("RcppCore/Rcpp")
packrat::init()
?Matrix
library(Matrix)
vignette(Matrix)
search()
?package:Matrix
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
install.packages("Matrix"0
install.packages("Matrix")
install.packages("Matrix")
packrat::init()
packrat::clean()
packrat::init()
shiny::runApp()
runApp()
runApp()
shiny::publish()
shinyApp::publish()
rsconnect::deployApp()
packrat::init()
rsconnect::deployApp()
