end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end
#name, score, strand_1, strand_2, sample
)
atdf
a1df
h
max(h)
max(w)
max(lwd)
max(bedPE$score)
max_counts <- 13
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end
name = NA,
score = max_counts,
strand_1,
strand_2,
sample
)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1,
strand_2,
sample = sample
)
dim(sample)
length(sample)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
head(a1df)
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
max(lwd)
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("green", dim(a1df[1])))
h <- c(h, rep(0.1, dim(a1df[1])))
lwd <- c(lwd, rep(5, dim(a1df[1])))
dim(a1df[1])
tail(bedPE)
cs <- c(cs, rep("green", dim(a1df)[1]))
h <- c(h, rep(0.1, dim(a1df)[1]))
lwd <- c(lwd, rep(5, dim(a1df)[1]))
length(cs)
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
# Add single loops
if(!is.null(oneAnchor)){
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(5, dim(a1df)[1]))
}
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
dim(bedPE)
876/4
bedPE <- bedPE[1:219,] #remove me
bedPE <- bedPE[1:219,] #remove me
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(5, dim(a1df)[1]))
}
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(5, dim(a1df)[1]))
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
length(cs)
length(bedPE)
dim(bedPE)
cs <- 0
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
bedPE <- bedPE[1:219,] #remove me
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
# Add single loops
if(!is.null(oneAnchor)){
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(5, dim(a1df)[1]))
}
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
cs <- 0
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
bedPE <- bedPE[1:219,] #remove me
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
# Add single loops
if(!is.null(oneAnchor)){
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(1, dim(a1df)[1]))
}
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
# Setup colors for plotting
cs <- 0
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
bedPE <- bedPE[1:219,] #remove me
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
# Add single loops
if(!is.null(oneAnchor)){
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.02, dim(a1df)[1]))
lwd <- c(lwd, rep(4, dim(a1df)[1]))
}
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
# Setup colors for plotting
cs <- 0
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
bedPE <- bedPE[1:219,] #remove me
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max_counts)
# Add single loops
if(!is.null(oneAnchor)){
#Make new data frame
tdf <- data.frame(oneAnchor)
a1df <- data.frame(
chr_1 = tdf$seqnames,
start_1 = tdf$start,
end_1 = tdf$start,
chr_2 = tdf$seqnames,
start_2 = tdf$end,
end_2 = tdf$end,
name = NA,
score = max_counts,
strand_1 = ".",
strand_2 = ".",
sample = sample
)
bedPE <- rbind(bedPE, a1df)
#Update vectors
cs <- c(cs, rep("forestgreen", dim(a1df)[1]))
h <- c(h, rep(0.01, dim(a1df)[1]))
lwd <- c(lwd, rep(4, dim(a1df)[1]))
}
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
shiny::runApp()
runApp()
one_anchor_samples[[which(map_chia_pet.indices == i)]]
one_anchor_samples[[which(map_chia_pet.indices == 5)]]
vari <- 1
tryCatch(print("passes"), error = function(e) print(vari), finally=print("finished"))
oa <- try(one_anchor_samples[[which(map_chia_pet.indices == i)]])
oa
oa <- try(one_anchor_samples[[which(map_chia_pet.indices == i)]])
if("try-error" %in% class(oa)) oa <- NULL
head(oa)
oa <- try(one_anchor_samples[[which(map_chia_pet.indices == 5)]])
i <- 6
oa <- try(one_anchor_samples[[which(map_chia_pet.indices == i)]])
if("try-error" %in% class(oa)) oa <- NULL
oa
oa <- try(one_anchor_samples[[which(map_chia_pet.indices == i)]], silent=T)
if("try-error" %in% class(oa)) oa <- NULL
runApp()
runApp()
runApp()
shiny::runApp()
* [Interactive zooming](#iz)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
# Import locally hosted data file names
g_m.c.full <- list.files("data/mouse/loops", full.names = TRUE)
g_m.t.files <- list.files("data/mouse/tracks", full.names = TRUE)
g_m.m.files <- list.files("data/mouse/methylation", full.names = TRUE)
g_m.m.files
g_m.m.bw.full <- g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)))]
g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)))]
as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)))
g_m.m.bw.full <- tryCatch(g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)))], error = "")
tryCatch(as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files))), error = "")
sapply(bigwig, grepl, g_m.m.files))
sapply(bigwig, grepl, g_m.m.files)
rowSums(sapply(bigwig, grepl, g_m.m.files))
g_h.c.full <- list.files("data/human/loops", full.names = TRUE)
g_h.t.files <- list.files("data/human/tracks", full.names = TRUE)
g_h.m.files <- list.files("data/human/methylation", full.names = TRUE)
sapply(bigwig, grepl, g_h.t.files)
rowSums(sapply(bigwig, grepl, g_h.t.files))
as.logical(tryCatch(rowSums(sapply(bigwig, grepl, g_m.m.files)), error = ""))
g_m.m.bw.full <- g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)), error = "")]
try(g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files))])
try(g_m.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.m.files)))])
runApp()
g_m.t.bw.full <- g_m.t.files[as.logical(rowSums(sapply(bigwig, grepl, g_m.t.files)))]
g_m.t.bw.full
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
