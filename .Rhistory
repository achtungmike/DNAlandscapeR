addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
if(grepl("amazonaws", file)){ x <- readRDS(gzcon(url(file)))
} else { x <- readRDS(file) }
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
hic.mat <- x[[chromchr]]
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(chromstart - chromend)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicm))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = 0
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicm))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
hicdata <- x[[chromchr]]
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(chromstart - chromend)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicm))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = 0
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicm))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicm))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = 0
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicm))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
hicdata <- x[[chromchr]]
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = 0
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -1
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.75
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# make an empty plot
plot(0, 0, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
xs
ys
rownum
colnum
# make an empty plot
plot(0, 0, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(rownum != 1){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(colnum != 1){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
for (rownum in (1:nrow(hicregion))) {
y = -0.6
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
print("here")
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
region <- GRanges(seqnames=c("9"),ranges=IRanges(start=c(1129720),end=c(33277926)))
if(grepl("amazonaws", file)){ x <- readRDS(gzcon(url(file)))
} else { x <- readRDS(file) }
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
hicdata <- x[[chromchr]]
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
}
if(grepl("amazonaws", file)){ x <- readRDS(gzcon(url(file)))
} else { x <- readRDS(file) }
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
hicdata <- x[[chromchr]]
# Hacked Sushi HiC Plot Function
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)]
hicregion[upper.tri(hicregion)] <- NA
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion, na.rm = TRUE)
# map to colors
breaks <- seq(min(hicregion, na.rm = TRUE), max(hicregion, na.rm = TRUE), length.out = 100)
cols <- palette(length(breaks) + 1)
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
# make an empty plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(colnum != rownum){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else { #triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
runApp()
runApp()
runApp()
runApp()
g_h.t.files
file <- "http://s3.amazonaws.com/dnalandscaper/data/human/tracks/K562-DNase.bw"
region.bed <- import.bw(file, which = addchr(region))
region.bedgraph <- data.frame(region.bed)
region.bedgraph <- region.bedgraph[,c(-4,-5)]
chrom <- as.character(seqnames(region))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(region))))
end <- as.integer(end(ranges(range(region))))
head(region.bedgraph)
dim(region.bedgraph)
log2 <- 1
if(log2) print("hey")
if(!log2) print("hey")
?log2
if(log2) region.bedgraph$score <- log2(region.bedgraph$score)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rda<-paste(system.file('rda',package='diffloop'),'human.genes.rda',sep='/')
load(rda)
human.genes
?toupper
x <- "hdhdh1"
toupper(x)
load("data/GenomeAnnotation/hg19/geneinfo.rda")
head(geneinfo)
t <- geneinfo[,1]
t
t <- geneinfo[1,]
t
GRanges(t)
GRanges(t[c(1,2,3,4)])
padGRanges(t.gr, pad = as.integer(width(t.gr)/2))
t.gr <- GRanges(t[c(1,2,3,4)])
padGRanges(t.gr, pad = as.integer(width(t.gr)/2))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
