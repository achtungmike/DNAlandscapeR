i.temp[!grepl(".rds", i.temp)]
i.temp
g_h.i.full <- i.temp[grepl(".rds", i.temp)]
g_h.i.full
if(length(g_h.i.samples) != 0){
g_h.i.list <- as.list(seq(1, length(g_h.i.samples), by = 1) + 5000000)
names(g_h.i.list) <- g_h.i.samples
} else {g_h.i.list <- list()}
g_h.i.list
g_h.i.samples
g_h.c.full <- c(g_h.t.files, amazon.filenames[grepl("data/human/loops/.{1,}", amazon.filenames)])
g_h.t.files <- c(g_h.t.files, amazon.filenames[grepl("data/human/tracks/.{1,}", amazon.filenames)])
g_h.m.files <- c(g_h.m.files, amazon.filenames[grepl("data/human/methylation/.{1,}", amazon.filenames)])
i.temp <- amazon.filenames[grepl("data/human/hic/.{1,}", amazon.filenames)]
g_h.i.samples <- basename(c(g_h.i.samples,  i.temp[!grepl("_", i.temp)]))
g_h.i.full <- i.temp[grepl(".rds", i.temp)]
g_h.i.samples
g_h.c.full <- list.files("data/human/loops", full.names = TRUE)
g_h.t.files <- list.files("data/human/tracks", full.names = TRUE)
g_h.m.files <- list.files("data/human/methylation", full.names = TRUE)
g_h.i.samples <- character(0)
# Append amazon data
g_h.c.full <- c(g_h.t.files, amazon.filenames[grepl("data/human/loops/.{1,}", amazon.filenames)])
g_h.t.files <- c(g_h.t.files, amazon.filenames[grepl("data/human/tracks/.{1,}", amazon.filenames)])
g_h.m.files <- c(g_h.m.files, amazon.filenames[grepl("data/human/methylation/.{1,}", amazon.filenames)])
i.temp <- amazon.filenames[grepl("data/human/hic/.{1,}", amazon.filenames)]
g_h.i.samples <- basename(i.temp[!grepl("_", i.temp)])
g_h.i.full <- i.temp[grepl(".rds", i.temp)]
# From 1-1,000,000-- ChIA-PET loops objects
if(length(g_h.c.full) != 0){
g_h.c.names <- basename(file_path_sans_ext(g_h.c.full))
g_h.c.list <- as.list(seq(1, length(g_h.c.names), by = 1) + 0)
names(g_h.c.list) <- g_h.c.names
} else { g_h.c.list <- list(); g_h.c.full <- list()}
bigwig <- c(".bw", ".bigwig", ".bigWig")
# From 1,000,001-2,000,000-- ReadDepth Tracks-- bigwig
g_h.t.bw.full <- g_h.t.files[as.logical(rowSums(sapply(bigwig, grepl, g_h.t.files)))]
if(length(g_h.t.bw.full) != 0){
g_h.t.bw.names <- basename(file_path_sans_ext(g_h.t.bw.full))
g_h.t.bw.list <- as.list(seq(1, length(g_h.t.bw.names), by = 1) + 1000000)
names(g_h.t.bw.list) <- g_h.t.bw.names
} else { g_h.t.bw.list <- list(); g_h.t.bw.full <- list()}
# From 2,000,001-3,000,000-- ReadDepth Tracks-- Bedgraph
g_h.t.bg.full <- g_h.t.files[grep(".bedgraph", g_h.t.files, fixed=T)]
if(length(g_h.t.bg.full) != 0){
g_h.t.bg.names <- basename(file_path_sans_ext(g_h.t.bg.full))
g_h.t.bg.list <- as.list(seq(1, length(g_h.t.bg.names), by = 1) + 2000000)
names(g_h.t.bg.list) <- g_h.t.bg.names
} else { g_h.t.bg.list <- list(); g_h.t.bg.full <- list() }
# From 3,000,001-4,000,000-- Methylation Tracks-- bigwig
g_h.m.bw.full <- g_h.m.files[as.logical(rowSums(sapply(bigwig, grepl, g_h.m.files)))]
if(length(g_h.m.bw.full) != 0){
g_h.m.bw.names <- basename(file_path_sans_ext(g_h.m.bw.full))
g_h.m.bw.list <- as.list(seq(1, length(g_h.m.bw.names), by = 1) + 3000000)
names(g_h.m.bw.list) <- g_h.m.bw.names
} else { g_h.m.bw.list <- list(); g_h.m.bw.full <- list()}
# From 4,000,001-5,000,000-- Methylation Tracks-- Bedgraph
g_h.m.bg.full <- g_h.m.files[grep(".bedgraph", g_h.m.files, fixed=T)]
if(length(g_h.m.bg.full) != 0){
g_h.m.bg.names <- basename(file_path_sans_ext(g_h.m.bg.full))
g_h.m.bg.list <- as.list(seq(1, length(g_h.m.bg.names), by = 1) + 4000000)
names(g_h.m.bg.list) <- g_h.m.bg.names
} else { g_h.m.bg.list <- list(); g_h.m.bg.full <- list()}
# From 5,000,001-6,000,000-- HiC Tracks-- .rds
if(length(g_h.i.samples) != 0){
g_h.i.list <- as.list(seq(1, length(g_h.i.samples), by = 1) + 5000000)
names(g_h.i.list) <- g_h.i.samples
} else {g_h.i.list <- list()}
g_h.i.list
g_hi.samples
g_h.i.samples
g_h.i.full
i.temp[!grepl(".rds", i.temp)]
i.temp[!grepl(".rds", i.temp) & repl("_", i.temp)]]
i.temp[!grepl(".rds", i.temp) & repl("_", i.temp)]
i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)]'
i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)]
'
i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)]
basename(i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)])
# Initialize data from Amazon
amazon <- "http://s3.amazonaws.com/dnalandscaper"
xmlDat <- getURL(amazon, ftp.use.epsv = FALSE, dirlistonly = TRUE)
amazon.filenames <- gsubfn::strapplyc(xmlDat, "<Contents><Key>(.*?)</Key>", simplify = c)
amazon.filenames <- paste(amazon, amazon.filenames, sep = "/")
## HUMAN INITIALIZATION ##
# Import locally hosted data file names
g_h.c.full <- list.files("data/human/loops", full.names = TRUE)
g_h.t.files <- list.files("data/human/tracks", full.names = TRUE)
g_h.m.files <- list.files("data/human/methylation", full.names = TRUE)
g_h.i.samples <- character(0)
# Append amazon data
g_h.c.full <- c(g_h.t.files, amazon.filenames[grepl("data/human/loops/.{1,}", amazon.filenames)])
g_h.t.files <- c(g_h.t.files, amazon.filenames[grepl("data/human/tracks/.{1,}", amazon.filenames)])
g_h.m.files <- c(g_h.m.files, amazon.filenames[grepl("data/human/methylation/.{1,}", amazon.filenames)])
# HiC dealings
i.temp <- amazon.filenames[grepl("data/human/hic/.{1,}", amazon.filenames)]
g_h.i.samples <- basename(i.temp[!grepl("_", i.temp)])
g_h.i.resolutions <- basename(i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)])
g_h.i.samples <- paste(g_h.i.samples, "-HiC", sep="")
g_h.i.full <- i.temp[grepl(".rds", i.temp)]
g_h.i.resolutions
lapply(g_h.i.samples, function(t){res.temp[grepl(t, res.temp)]})
res.temp <- basename(i.temp[!grepl(".rds", i.temp) & grepl("_", i.temp)])
lapply(g_h.i.samples, function(t){res.temp[grepl(t, res.temp)]})
res.temp
g_h.i.samples
i.temp <- amazon.filenames[grepl("data/human/hic/.{1,}", amazon.filenames)]
g_h.i.samples <- basename(i.temp[!grepl("_", i.temp)])
g_h.i.samples
lapply(g_h.i.samples, function(t){res.temp[grepl(t, res.temp)]})
names(g_h.i.res) <- g_h.i.samples
g_h.i.res <- lapply(g_h.i.samples, function(t){res.temp[grepl(t, res.temp)]})
names(g_h.i.res) <- g_h.i.samples
g_h.i.res
t
g_h.i.res <- lapply(g_h.i.samples, function(t){strsplit(res.temp[grepl(t, res.temp)],split="_")[2]})
names(g_h.i.res) <- g_h.i.samples
g_h.i.res
t <- "Test"
strsplit(res.temp[grepl(t, res.temp)],split="_")
unlist(strsplit(res.temp[grepl(t, res.temp)],split="_"))
g_h.i.res <- lapply(g_h.i.samples, function(t){unlist(strsplit(res.temp[grepl(t, res.temp)],split="_"))[c(FALSE,TRUE)]})
names(g_h.i.res) <- g_h.i.samples
g_h.i.res
?selectInput
sample < - "GM12878"
sample <- "GM12878"
g_h.i.res
g_h.i.res[[sample]]
res <- as.integer(g_h.i.res[[sample]])
res
sort(as.integer(g_h.i.res[[sample]]))
runApp()
runApp()
runApp()
sample
g_h.i.res
g_h.i.samples
runApp()
runApp()
runApp()
?bsCollapse
runApp()
load("data/GenomeAnnotation/hg19/geneinfo.rda")
geneinfo$gene
"AGO3" %in% geneinfo$gene
head(geneinfo)
runApp()
g_h.i.full
xxx <- "GM12878-HiC"
gsub("-HiC", "", xxx)
g_h.i.list
g_h.i.full
?paste0
res <- 20000
sample <- "GM12878"
sample
res
res <- "20000"
chrom <- "chr8"
grepl(paste0(chrom, ".rds", g_h.i.full))
chrom
grepl(paste0(chrom, ".rds"), g_h.i.full)
grepl(res, g_h.i.full)
fs <- g_h.i.full
file <- fs[grepl(paste0(chrom, ".rds"), fs) & grepl(res, fs) & grepl(sample, fs)]
file
} else { # Uploaded .rds
runApp()
g_h.i.list
names(g_h.i.list)
runApp()
choices
choices = list("Mean"="mean", "Max"="max", "Median"="median")
choices
res
res <- c(20000, 1000000)
list(res)
options(scipen=999)
as.list(res)
runApp()
runApp()
default_chr <- "9"
default_start <- 21912689
default_end <- 22216233
file
"http://s3.amazonaws.com/dnalandscaper/data/human/hic/GM12878/GM12878_1000000/GM12878_1000000-chr9.rds"
file <- "http://s3.amazonaws.com/dnalandscaper/data/human/hic/GM12878/GM12878_1000000/GM12878_1000000-chr9.rds"
hicdata <- readRDS(gzcon(url(file)))
chrom <- "9"
start <- "21912689"
end <- "22216233"
SushiColors(6)
palette <- SushiColors(6)
palette
library(Sushi)
SushiColors(6)
SushiColors(5)
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
hicregion
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
nbins
start
start <- 21912689
end <- 22216233
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
breaks <- seq(min_z, max_z, length.out = 100)
breaks
cols <- palette(length(breaks) + 1)
cols
breaks <- seq(min_z, max_z, length.out = 100)
breaks
length(unique(breaks))
cols
cols[101]
max(cols)
max(cols)
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
if(length(unique(breaks))){
hicmcol <- max(cols)
} else {
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
}
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
colnum
hicmcol
hicmcol <- matrix(max(cols), nrow = 1, ncol = 1)
hicmcol
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
chromchr <- chr(9)
chromchr <- "chr9"
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
if(min_z == max_z) min_z <- 0
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
runApp()
runApp()
start <- 1912689
end <- 22216233
palette <- SushiColors(6)
rows <- as.numeric(rownames(hicdata))
cols <- as.numeric(colnames(hicdata))
hicregion <- as.matrix(hicdata[which(rows >= start & rows <= end), which(cols >= start & cols <= end)])
# determine number of bins
nbins <- nrow(hicregion)
stepsize <- abs(start - end)/(2 * nbins)
max_z <- max(hicregion, na.rm = TRUE)
min_z <- min(hicregion[hicregion > 0], na.rm = TRUE)
# map to colors
breaks <- seq(min_z, max_z, length.out = 100)
cols <- palette(length(breaks) + 1)
if(length(unique(breaks)) == 1){
hicmcol <- matrix(max(cols), nrow = 1, ncol = 1)
} else {
hicmcol <- matrix(as.character(cut(hicregion, c(-Inf, breaks, Inf), labels = cols)), nrow = nrow(hicregion))
}
# initialize plot
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
for (rownum in (1:nrow(hicregion))) {
y = -0.5
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + 0.5
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + 0.5, y, y - 0.5, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - 0.5, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + 0.5, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
if(min_z == max_z) min_z <- 0
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
dim(hicregion)
h <- 20/min(40, dim(hicregion)[2])
for (rownum in (1:nrow(hicregion))) {
y = -1*h
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + h
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + h, y, y - h, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - h, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + h, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
if(min_z == max_z) min_z <- 0
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
}
plot(1, 1, xlim = c(start, end), ylim = c(0, 20), type = "n", xaxs = "i", yaxs = "i",
bty = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "", main = sample, adj = 0)
# fill plot
h <- 20/min(40, dim(hicregion)[2])
for (rownum in (1:nrow(hicregion))) {
y = -1*h
x = start + (rownum * 2 * stepsize) - (stepsize * 2)
for (colnum in (rownum:ncol(hicregion))) {
x = x + stepsize
y = y + h
if(y <= 20){
if(colnum != rownum & y!=20){ # Square
xs = c(x - stepsize, x, x + stepsize, x, x - stepsize)
ys = c(y, y + h, y, y - h, y)
} else if(y == 20){ #upside down triangle
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y - h, y)
} else {
xs = c(x - stepsize, x, x + stepsize)
ys = c(y, y + h, y)
}
polygon(xs, ys, border = NA, col = hicmcol[colnum, rownum])
}
}
}
labelgenome(chromchr, start, end, n=4, scale="Mb",edgeblankfraction=0.20)
if(min_z == max_z) min_z <- 0
addlegend(c(min_z, max_z), palette = palette, title="", side="right",
bottominset=0.4, topinset=0, xoffset=-.035, labelside="left",
width=0.025, title.offset=0.035)
}
runApp()
runApp()
g_h.i.list
g_h.i.list[1]
name(g_h.i.list[1])
names(g_h.i.list[1])
sample.hic <- "GM12878-HiC"
gsub("-HiC", "", sample.hic)
names(g_h.i.list)
runApp()
runApp()
runApp()
runApp()
?colorRampPalette
install.packages("colorRamps")
library(colorRamps)
grDevices::topo.colors()
?grDevies::topocolors
?grDevices::topocolors
?grDevices::topo.colors
install.packages('RColorBrewer')
packrat::snapshot()
packrat::snapshot()
?Blues
?RColorBrewer
library(RColorBrewer)
?RColorBrewer
brewer.pal(6,"Blues")
runApp()
runApp()
runApp()
packrat::snapshot()
runApp()
runApp()
if(palette == 3) return(colorRampPalette(c("#fffaf0", "#40826d")))
runApp()
?colorRamps
colorRamps::matlab.like2(10)
runApp()
if(palette == 11) return(colorRampPalette(c("black","blue","#5900E5","#E5001B","orange","yellow")))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grDevices::topo.colors(10)
runApp()
if(p == 14) return(colorRampPalette(grDevices::heat.colors(20)))
runApp()
runApp()
runApp()
runApp()
hicregion
?log
log2(hicregion)
hicregion <- log2(hicregion)
hicregion[hicregion<0] <- 0
hicregion
runApp()
runApp()
runApp()
g_h.c.full
h_c.list
g_h.c.list
runApp()
runApp()
names(uploadchoices)
runApp()
