runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fileInput
uploadchoices <- list("Loops/.rds" = 1,
"ReadDepth/.bigWig" = 2,
"ReadDepth/.bedgraph" = 3,
"Methylation/.bigWig" = 4,
"Methylation/.bedgraph" = 5)
uploadchoices
revert_list_str_7 <-  function(ll) { # @Josh O'Brien
nms <- unique(unlist(lapply(ll, function(X) names(X))))
ll <- lapply(ll, function(X) setNames(X[nms], nms))
ll <- apply(do.call(rbind, ll), 2, as.list)
lapply(ll, function(X) X[!sapply(X, is.null)])
}
uploadchoices.inv <- revert_list_str_7(uploadchoices)
uploadchoices.inv
uploadchoices
str(uploadchoices)
names(uploadchoices)
names(uploadchoices)[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Global variables for both server.R and ui.R to reference
library(tools)
library(shiny)
library(shinythemes)
library(ggplot2)
library(GenomicRanges)
library(diffloop)
library(Sushi)
library(foreach)
library(rtracklayer)
library(DT)
library(grid)
library(readr)
library(bumphunter)
library(shinyFiles)
uploadchoices <- list("Loops/.rds" = 1,
"ReadDepth/.bigWig" = 2,
"ReadDepth/.bedgraph" = 3,
"Methylation/.bigWig" = 4,
"Methylation/.bedgraph" = 5)
# Import locally hosted data file names
c.full <- list.files("data/loops", full.names = TRUE)
t.files <- list.files("data/tracks", full.names = TRUE)
m.files <- list.files("data/methylation", full.names = TRUE)
# From 1-1,000,000-- ChIA-PET loops objects
if(length(c.full) != 0){
c.names <- basename(file_path_sans_ext(c.full))
c.list <- as.list(seq(1, length(c.names), by = 1) + 0)
names(c.list) <- c.names
} else { c.list <- list(); c.full <- list()}
bigwig <- c(".bw", ".bigwig", ".bigWig")
# From 1,000,001-2,000,000-- ReadDepth Tracks-- bigwig
t.bw.full <- t.files[as.logical(rowSums(sapply(bigwig, grepl, t.files)))]
if(length(t.bw.full) != 0){
t.bw.names <- basename(file_path_sans_ext(t.bw.full))
t.bw.list <- as.list(seq(1, length(t.bw.names), by = 1) + 1000000)
names(t.bw.list) <- t.bw.names
} else { t.bw.list <- list(); t.bw.full <- list()}
# From 2,000,001-3,000,000-- ReadDepth Tracks-- Bedgraph
t.bg.full <- t.files[grep(".bedgraph", t.files, fixed=T)]
if(length(t.bg.full) != 0){
t.bg.names <- basename(file_path_sans_ext(t.bg.full))
t.bg.list <- as.list(seq(1, length(t.bg.names), by = 1) + 2000000)
names(t.bg.list) <- t.bg.names
} else { t.bg.list <- list(); t.bg.full <- list() }
# From 3,000,001-4,000,000-- Methylation Tracks-- bigwig
m.bw.full <- m.files[as.logical(rowSums(sapply(bigwig, grepl, m.files)))]
if(length(m.bw.full) != 0){
m.bw.names <- basename(file_path_sans_ext(m.bw.full))
m.bw.list <- as.list(seq(1, length(m.bw.names), by = 1) + 3000000)
names(m.bw.list) <- m.bw.names
} else { m.bw.list <- list(); m.bw.full <- list()}
# From 4,000,001-5,000,000-- Methylation Tracks-- Bedgraph
m.bg.full <- m.files[grep(".bedgraph", m.files, fixed=T)]
if(length(m.bg.full) != 0){
m.bg.names <- basename(file_path_sans_ext(m.bg.full))
m.bg.list <- as.list(seq(1, length(m.bg.names), by = 1) + 4000000)
names(m.bg.list) <- m.bg.names
} else { m.bg.list <- list(); m.bg.full <- list()}
f.list <- append(c.list, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
sort(f.list)
f.list
sort.list(f.list)
sort.int(f.list)
str(f.list)
order(f.list)
sort(unlist(f.list))
str(sort(unlist(f.list)))
sort.list(unlist(f.list))
f.list(order(f.list))
f.list[order(f.list)]
order(names(unlist(f.list)))
str(order(names(unlist(f.list))))
?unlist
order(names(unlist(f.list)))
names(unlist(f.list))
unlist(f.list)
data.frame(unlist(f.list))
d<-data.frame(unlist(f.list))
d[order(rownames(d)), ]
d$names <- rownames(d)
head(d)
d[order(rownames(d)), ]
f.list <- list(d[,1])
f.list
runApp()
f.list <- list(t(d[,1]))
f.list
d <- d[order(rownames(d)), ]
d
runApp()
apply(d, 2, function(t) t[,1])
apply(d, 2, function(t) t)
apply(d, 1, function(t) t[,1])
apply(d, 1, function(t) t)
d
d <- data.frame(unlist(f.list))
d$names <- rownames(d)
d <- d[order(rownames(d)), ]
f.list <- list()
for(k in 1:dim(d)[1]){
x <- list(d[i,1])
names(x) <- (d[i,2]
f.list <- append(f.list, x)
}
f.list <- append(c.list, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
# Now order it
d <- data.frame(unlist(f.list))
d$names <- rownames(d)
d <- d[order(rownames(d)), ]
f.list <- list()
for(k in 1:dim(d)[1]){
x <- list(d[i,1])
names(x) <- (d[i,2])
f.list <- append(f.list, x)
}
f.list <- append(c.list, append(append(t.bw.list, t.bg.list), append(m.bw.list, m.bg.list)))
# Now order it
d <- data.frame(unlist(f.list))
d$names <- rownames(d)
d <- d[order(rownames(d)), ]
f.list <- list()
for(k in 1:dim(d)[1]){
x <- list(d[k,1])
names(x) <- (d[k,2])
f.list <- append(f.list, x)
}
f.list
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("markdown")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h.c.full <- list.files("data/human/loops", full.names = TRUE)
h.c.full
h.c.full <- list.files("data/human/loops", full.names = TRUE)
h.c.full
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?br
runApp()
runApp()
runApp()
runApp()
runApp()
<br>
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyBS")
shinyBS::bsExample("Alerts")
library(shinyBS)
?bsExample
shinyBS::bsExample("Collapses")
runApp()
runApp()
?bsCollapse
runApp()
shinyBS::bsExample("Collapses")
runApp()
shinyBS::bsExample("Collapses")
shinyBS::bsExample("Collapses")
runApp()
runApp()
shinyBS::bsExample("Collapses")
runApp()
runApp()
runApp()
runApp()
runApp()
shinyBS::bsExample("Collapses")
runApp()
runApp()
3 %% 2
0 %% 2
1 %% 2
if(1 %% 2) cat ("hey")
if(0 %% 2) cat ("hey")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
packrat::init()
packrat::set_opts(ignored = c("diffloop"))
packrat::set_opts(ignored.packages = c("diffloop"))
packrat::init()
packrat::set_opts(ignored.packages = c("diffloop"))
packrat::init()
packrat::init()
packrat::set_opts( = c("/Users/lareauc/Desktop/Research/AryeeResearch/diffloop"))
packrat::set_opts(local.repo = c("/Users/lareauc/Desktop/Research/AryeeResearch/diffloop"))
packrat::set_opts(local.repos = c("/Users/lareauc/Desktop/Research/AryeeResearch/diffloop"))
packrat::init()
packrat::status()
source("https://bioconductor.org/biocLite.R")
biocLite("diffloop")
packrat::init()
packrat::packrat_mode(on = TRUE)
packrat::init()
packrat::snapshot()
load("data/GenomeAnnotation/hg19/geneinfo.rda")
chrom == "hahah"
chrom = "hahah"
start = "6"
start = 5
end = 4
geneinfo <- geneinfo[geneinfo$chrom == chrom & geneinfo$start > start & geneinfo$stop < end,]
head(geneinfo)
dim(geneinfo)
library(Sushi)
pg <- plotGenes(geneinfo = geneinfo, chrom = chromchr, chromstart = start,
chromend = end, bheight = 0.1, plotgenetype = "box",
bentline = FALSE, labeloffset = 0.4, fontsize = 1, arrowlength = 0.025,
labeltext = TRUE)
plotBedpe(data.frame(), chrom, start, end, color = c("blue"), lwd = 0,
plottype = "loops", heights = 0, lwdrange = c(0, 0),
main = sample, adj=0)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y <- GRanges(seqnames=c("12"),ranges=IRanges(start=c(12715058),end=c(12722371)))
y
humanAnnotation <- function(y) {
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
# Use cache annotation
load("data/GenomeAnnotation/hg19/geneinfo.rda")
geneinfo <- geneinfo[geneinfo$chrom == chrom & geneinfo$start > start & geneinfo$stop < end,]
loplot <- recordPlot()
if(dim(geneinfo)[1] == 0){
pg <- plotBedpe(data.frame(), chrom, start, end, color = c("blue"), lwd = 0,
plottype = "loops", heights = 0, lwdrange = c(0, 0),
main = sample, adj=0)
} else {
pg <- plotGenes(geneinfo = geneinfo, chrom = chromchr, chromstart = start,
chromend = end, bheight = 0.1, plotgenetype = "box",
bentline = FALSE, labeloffset = 0.4, fontsize = 1, arrowlength = 0.025,
labeltext = TRUE)
}
mtext(paste0("Region: ", chrom, ":", start, "-", end), outer = TRUE,
line = 1)
return(loplot)
}
humanAnnotation(y)
humanAnnotation <- function(y) {
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
# Use cache annotation
load("data/GenomeAnnotation/hg19/geneinfo.rda")
geneinfo <- geneinfo[geneinfo$chrom == chrom & geneinfo$start > start & geneinfo$stop < end,]
loplot <- recordPlot()
if(dim(geneinfo)[1] == 0){
plotBedpe(data.frame(), chrom, start, end, color = c("blue"), lwd = 0,
plottype = "loops", heights = 0, lwdrange = c(0, 0),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
} else {
pg <- plotGenes(geneinfo = geneinfo, chrom = chromchr, chromstart = start,
chromend = end, bheight = 0.1, plotgenetype = "box",
bentline = FALSE, labeloffset = 0.4, fontsize = 1, arrowlength = 0.025,
labeltext = TRUE)
}
mtext(paste0("Region: ", chrom, ":", start, "-", end), outer = TRUE,
line = 1)
return(loplot)
}
humanAnnotation(y)
plot.new()
humanAnnotation(y)
y <- GRanges(seqnames=c("12"),ranges=IRanges(start=c(12718058),end=c(12720371)))
humanAnnotation(y)
humanAnnotation <- function(y) {
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
# Use cache annotation
load("data/GenomeAnnotation/hg19/geneinfo.rda")
geneinfo <- geneinfo[geneinfo$chrom == chrom & geneinfo$start > start & geneinfo$stop < end,]
loplot <- recordPlot()
if(dim(geneinfo)[1] == 0){
plotBedpe(data.frame(), chrom, start, end, color = c("blue"), lwd = 0,
plottype = "loops", heights = 0, lwdrange = c(0, 0),
main = "", adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
} else {
pg <- plotGenes(geneinfo = geneinfo, chrom = chromchr, chromstart = start,
chromend = end, bheight = 0.1, plotgenetype = "box",
bentline = FALSE, labeloffset = 0.4, fontsize = 1, arrowlength = 0.025,
labeltext = TRUE)
}
mtext(paste0("Region: ", chrom, ":", start, "-", end), outer = TRUE,
line = 1)
return(loplot)
}
humanAnnotation(y)
runApp()
runApp()
runApp()
chr1reg <- GRanges(seqnames=c("1"),ranges=IRanges(start=c(152583052),end=c(152614119)))
y <- chr1reg
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
if(organism == "human") load("data/GenomeAnnotation/hg19/geneinfo.rda")
organism <- "human"
if(organism == "human") load("data/GenomeAnnotation/hg19/geneinfo.rda")
geneinfo <- geneinfo[geneinfo$chrom == chrom & geneinfo$start > start & geneinfo$stop < end,]
head(geneinfo)
runApp()
runApp()
runApp()
runApp()
load("data/GenomeAnnotation/hg19/geneinfo.rda")
head(geneinfo)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
