# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2,
sample_id)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
idx <- which(bedPE$sample_id == sample)
plotBedpe(bedPE[idx, ], chrom, start, end, color = cs, lwd = lwd[idx],
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
return(loplot)
} else {
return()
}
colorLoops=TRUE
if(dim(objReg)[2] != 1 & !is.na(objReg@interactions[1,1])){
res <- objReg@rowData
# Dimensions of dataframe
n <- dim(objReg@interactions)[1]  #number of interactions
m <- 1
cs <- 0
# Setup colors for plotting
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2,
sample_id)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
idx <- which(bedPE$sample_id == sample)
plotBedpe(bedPE[idx, ], chrom, start, end, color = cs, lwd = lwd[idx],
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
return(loplot)
} else {
return()
}
load(file)
sample <- basename(file_path_sans_ext(file))
x <- get(sample)
# Grab Regional Coordinates
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
#  Restrict the loops object to the region
objReg <- removeSelfLoops(subsetRegion(x, y))
if(dim(objReg)[2] != 1 & !is.na(objReg@interactions[1,1])){
res <- objReg@rowData
# Dimensions of dataframe
n <- dim(objReg@interactions)[1]  #number of interactions
m <- 1
cs <- 0
# Setup colors for plotting
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2,
sample_id)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
idx <- which(bedPE$sample_id == sample)
plotBedpe(bedPE[idx, ], chrom, start, end, color = cs, lwd = lwd[idx],
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
}
cs
name
bedPE
lwd
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
bedPE
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE[idx, ], chrom, start, end, color = cs, lwd = lwd[idx],
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
return(loplot)
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE[idx, ], chrom, start, end, color = cs, lwd = lwd[idx],
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
seqnames(y)
as.character(seqnames(y))
as.numeric(as.character(seqnames(y)))
as.numeric(seqnames(y))
start <- as.integer(start(ranges(range(y))))
start
runApp()
setwd("~/Desktop/Research/DNAlandscapeR")
runApp()
runApp()
file
y
load(file)
sample <- basename(file_path_sans_ext(file))
x <- get(sample)
# Grab Regional Coordinates
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
#  Restrict the loops object to the region
objReg <- removeSelfLoops(subsetRegion(x, y))
if(dim(objReg)[2] != 1 & !is.na(objReg@interactions[1,1])){
res <- objReg@rowData
n <- dim(objReg@interactions)[1]  #number of interactions
m <- 1
cs <- 0
# Setup colors for plotting
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
cs <- 0
# Setup colors for plotting
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
}
cs <- 0
# Setup colors for plotting
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(m, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,
2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(m, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * m)
strand_2 <- rep(".", n * m)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts), function(x) rep(x,
n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
# Plot
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
runApp()
runApp()
?labelgenome
runApp()
region
chr1reg <- GRanges(seqnames=c("1"),ranges=IRanges(start=c(36000000),end=c(36100000)))
file
oneSampleLoopPlot <- function(file, y, colorLoops = TRUE) {
# Load the RDA
load(file)
sample <- basename(file_path_sans_ext(file))
x <- get(sample)
# Grab Regional Coordinates
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
#  Restrict the loops object to the region
objReg <- removeSelfLoops(subsetRegion(x, y))
}
dim(objectReg)
dim(objReg)
y <- chr1reg
load(file)
sample <- basename(file_path_sans_ext(file))
x <- get(sample)
# Grab Regional Coordinates
chrom <- as.character(seqnames(y))
chromchr <- paste(c("chr", as.character(chrom)), collapse = "")
start <- as.integer(start(ranges(range(y))))
end <- as.integer(end(ranges(range(y))))
#  Restrict the loops object to the region
objReg <- removeSelfLoops(subsetRegion(x, y))
objReg
dim(objReg)
is.na(objReg@interactions[1,1])
dim(objReg)[2] != 0)
dim(objReg)[2] != 0
sum(dim(objReg)[2] != 0))
sum(dim(objReg)[2] != 0)
if(dim(objReg)[2] != 0){
res <- objReg@rowData
n <- dim(objReg@interactions)[1]  #number of interactions
# Setup colors for plotting
cs <- 0
if(!is.null(res$loop.type) & colorLoops){
cs <- res$loop.type
cs <- gsub("e-p", "red", cs)
cs <- gsub("ctcf", "blue", cs)
cs <- gsub("none", "black", cs)
} else {
cs <- rep("black", n)
}
# Setup Dataframe for Plot
leftAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,1]])[c(1, 2, 3)]
LA <- do.call("rbind", replicate(1, leftAnchor, simplify = FALSE))
rightAnchor <- as.data.frame(objReg@anchors[objReg@interactions[,2]])[c(1, 2, 3)]
RA <- do.call("rbind", replicate(1, rightAnchor, simplify = FALSE))
colnames(LA) <- c("chr_1", "start_1", "end_1")
colnames(RA) <- c("chr_2", "start_2", "end_2")
name <- rep(NA, n)
strand_1 <- rep(".", n * 1)
strand_2 <- rep(".", n * 1)
score <- matrix(objReg@counts, ncol = 1)
sample_id <- matrix(sapply(colnames(objReg@counts),
function(x) rep(x,n)), ncol = 1)
bedPE <- data.frame(LA, RA, name, score, strand_1, strand_2, sample)
w <- loopWidth(objReg)
h <- sqrt(w/max(w))
lwd <- 5 * (bedPE$score/max(bedPE$score))
loplot <- recordPlot()
plotBedpe(bedPE, chrom, start, end, color = cs, lwd = lwd,
plottype = "loops", heights = h, lwdrange = c(0, 5),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
return(loplot)
} else {
# Return dummy plot
loplot <- recordPlot()
plotBedpe(data.frame(), chrom, start, end, color = c("blue"), lwd = 0,
plottype = "loops", heights = 0, lwdrange = c(0, 0),
main = sample, adj=0)
labelgenome(chromchr, start, end, side = 1, scipen = 20,
n = 3, scale = "Mb", line = 0.18, chromline = 0.5, scaleline = 0.5)
return(loplot)
}
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
runApp()
?oma
??oma
runApp()
runApp()
install.packages("shinythemes")
shiny::runApp()
runApp()
runApp()
?pageWithSidebar
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages('shinyFiles')
library(shinyFiles)
shinyFilesExample()
runApp()
runApp()
library(shinyFiles)
shinyFilesExample()
getVolumes()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyFilesExample()
runApp()
library(tools)
library(shiny)
library(shinyFiles)
library(shinythemes)
library(ggplot2)
library(GenomicRanges)
library(diffloop)
library(Sushi)
library(foreach)
library(rtracklayer)
connection
library(shinyFiles)
connection
library(tools)
library(shiny)
library(shinyFiles)
library(shinythemes)
library(ggplot2)
library(GenomicRanges)
library(diffloop)
library(Sushi)
library(foreach)
library(rtracklayer)
a
connection
library(shinyFiles)
connection
?connection
??connection
shinyFileExample()
shinyFilesExample()
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyFilesExample()
runExample("09_upload")
runApp()
runApp()
?fileInput
runApp()
runApp()
shinyFilesExample()
runApp()
runApp()
runApp()
runApp()
runApp()
View(methyl.bedgraph.trackplot)
runApp()
library(shinyFiles)
shinyFiles::connection
?shinyFiles::connection
??connection
runApp()
shinyFilesExample()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyFilesExample()
runApp()
runApp()
shinyFilesExample()
